@page "/myCars"
@using CarMarket.BusinessLogic.Image.Service
@using CarMarket.Core.Car.Domain
@using CarMarket.Core.Image.Domain
@using CarMarket.UI.Services.Car
@using Microsoft.AspNetCore.Authorization
@using System.IO

@attribute [Authorize(Roles = "Admin,User")]

<p>My cars</p>

@if (cars == null)
{
    <p><em>Loading cars...</em></p>
}
else
{
<table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Title</th>
                <th>Car type</th>
                <th>Description</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in cars)
            {
                <tr>
                    <td>
                    <NavLink href=@string.Format("/cars/cardetail/{0}", car.Id)>
                        @if (car.CarImages.Count > 0)
                        {
                            <img src="@ImageService.ConvertImageToDisplay(car.CarImages.FirstOrDefault())" height ="150px" />
                        }
                        else
                        {
                            <img src="https://thumbs.dreamstime.com/z/no-image-available-icon-flat-vector-no-image-available-icon-flat-vector-illustration-132482953.jpg" height="150px" />
                        }
                        </NavLink>
                    </td>
                    <td>@car.Name</td>
                    <td>@car.CarType</td>
                    <td>@car.Description</td>
                    <td>@car.Price</td>
                    <button class="btn btn-primary"
                        @onclick="() => EditCar(car)">
                        Edit
                    </button>
                    
                    <button class="btn btn-danger"
                        @onclick="(() => DeleteCar(car))">
                        Delete
                    </button>
                </tr>
            }
        </tbody>
    </table>

<AuthorizeView>
    @if (ShowPopup)
{
        @SetUpUserEmail(context);
    <!-- This is the popup to create or edit a car -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">@TitleContext</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current car -->
                <div class="modal-body">
                    <input class="form-control" type="text"
                                placeholder="Name"
                                @bind="editedCar.Name" />
                    <input class="form-control" type="text"
                            placeholder="Description"
                            @bind="editedCar.Description" />
                    <input class="form-control" type="number"
                            placeholder="Price"
                            @bind="editedCar.Price" />
                    <input class="form-control" type="email"
                            placeholder="Owner Email"
                            @bind="@CurrentUserEmail"/>

                    <select class="form-control"
                            @bind="@CurrentCarType">
                        @foreach (var option in Options)
                        {
                            <option value="@option">
                                @option
                            </option>
                        }
                    </select>
                    <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
                    <br>
                    <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
                    <br>
                    <BlazorInputFile.InputFile OnChange="HandleFilesSelected"></BlazorInputFile.InputFile>
                    <br>
                    <br /><br />

                        @if (editedCar.Id == 0)
                        {
                            <button class="btn btn-primary"
                            @onclick="() => CreateCar(context)">
                                Save
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary"
                            @onclick="() => UpdateCar()">
                                Update
                            </button>
                        }
                    <span style="color:red">@strError</span>
                </div>
            </div>
        </div>
    </div>
}
</AuthorizeView>
}
@code {
    [Inject]
    public IHttpCarService CarService { get; set; }

    private List<CarModel> cars { get; set; }

    protected override async Task OnInitializedAsync()
    {
        cars = (await CarService.GetAllUserCarsByTokenAsync()).ToList();
    }

    private CarModel car;
    private CarModel editedCar = new();
    private static List<string> Options = GetCarTypesSelection();

    private string strError = "";
    private bool ShowPopup = false;
    private string TitleContext { get; set; }
    private string CurrentCarType { get; set; } = Options.FirstOrDefault();
    private string CurrentUserEmail { get; set; }

    private object SetUpUserEmail(AuthenticationState context)
    {
        CurrentUserEmail = context.User.Identity.Name;

        return CurrentUserEmail;
    }

    private async Task HandleFilesSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if ((file != null) && (ImageService.IsImage(file.Name)))
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            editedCar.CarImages.Add(new ImageModel
            {
                ImageData = ms.ToArray(),
                ImageTitle = file.Name
            });
        }
        else strError += $"\nFile {file.Name} is not supported.\n";
    }

    private void AddCar()
    {
        editedCar = new()
        {
            Owner = new(),
            CarImages = new List<ImageModel>()
        };

        TitleContext = "Add new car";
        ShowPopup = true;
    }

    private async Task CreateCar(AuthenticationState context)
    {
        strError = string.Empty;

        if(!SetCarType(CurrentCarType)) return;
        if (string.IsNullOrWhiteSpace(editedCar.Name)) strError += "\nEnter car title";
        if (editedCar.Price == 0) strError += "\nEnter price";

        editedCar.Owner = new()
        {
            Email = CurrentUserEmail
        };

        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            await CarService.CreateAsync(editedCar);
        }
    }
    
    private void EditCar(CarModel updatedCar)
    {
        TitleContext = "Edit car";

        editedCar = updatedCar;

        CurrentCarType = editedCar.CarType.ToString();

        ShowPopup = true;
    }

    private async Task UpdateCar()
    {
        strError = string.Empty;

        if (!SetCarType(CurrentCarType)) return;

        editedCar.Owner = new()
        {
            Email = CurrentUserEmail
        };

        if (string.IsNullOrWhiteSpace(strError))
        {
            ShowPopup = false;

            await CarService.UpdateAsync(editedCar.Id, editedCar);
        }
    }

    private async Task DeleteCar(CarModel car)
    {
        ShowPopup = false;

        await CarService.DeleteAsync(car.Id);
    }

    private void ClosePopup()
    {
        ShowPopup = false;
    }

    private static List<string> GetCarTypesSelection()
    {
        var names = string.Join(",", Enum.GetNames(typeof(CarType)));

        var carTypes = new List<string>()
        {
            "Select car type",
        };

        carTypes.AddRange(names.Split(',').ToList());

        return carTypes;
    }

    private bool SetCarType(string carTypeName)
    {
        if (!Enum.TryParse(typeof(CarType), carTypeName, out object result))
        {
            strError += "\nSelect car type";
            return false;
        }

        editedCar.CarType = (CarType)result;

        return true;
    }
}
